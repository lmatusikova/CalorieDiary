package sk.upjs.caloriediary.provider;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.ContentObserver;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import static android.content.ContentResolver.SCHEME_CONTENT;
import sk.upjs.caloriediary.DatabaseHelper;

public class FoodContentProvider extends ContentProvider {

    private static final int URI_MATCH_NOTES = 0;
    private static final int URI_MATCH_NOTE_BY_ID = 1;
    private static final String AUTOGENERATED_ID = null;
    public static final String NO_NULL_COLUMN_HACK = null;
    public static final ContentObserver NO_CONTENT_OBSERVER = null;
    public static final String AUTHORITY = "sk.upjs.caloriediary.provider.FoodContentProvider";
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Food.TABLE_NAME)
            .build();

    private DatabaseHelper databaseHelper;
    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    public FoodContentProvider() {
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTE_BY_ID:
                long id = ContentUris.parseId(uri);
                SQLiteDatabase db = databaseHelper.getWritableDatabase();
                int affectedRows = db.delete(Provider.Food.TABLE_NAME, Provider.Food._ID + " = " + id, null);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        // TODO: Implement this to handle requests for the MIME type of the data
        // at the given URI.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                Uri items = saveFood(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return items;
            default:
                return null;
        }
    }

    private Uri saveFood(ContentValues values) {
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        ContentValues food = new ContentValues();
        food.put(Provider.Food._ID, AUTOGENERATED_ID);
        food.put(Provider.Food.FOOD_NAME, values.getAsString(Provider.Food.FOOD_NAME));
        food.put(Provider.Food.CALORIE, values.getAsString(Provider.Food.CALORIE));
        food.put(Provider.Food.UNIT, values.getAsString(Provider.Food.UNIT));
        long newId = db.insert(Provider.Food.TABLE_NAME, NO_NULL_COLUMN_HACK, food);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public boolean onCreate() {
        this.databaseHelper = new DatabaseHelper(getContext());
        uriMatcher.addURI(AUTHORITY, Provider.Food.TABLE_NAME, URI_MATCH_NOTES);
        uriMatcher.addURI(AUTHORITY, Provider.Food.TABLE_NAME + "/#", URI_MATCH_NOTE_BY_ID);
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        Cursor cursor = db.query(Provider.Food.TABLE_NAME, null, null, null, null, null, null);
        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        return 0;
    }
}
