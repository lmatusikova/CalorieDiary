package sk.upjs.caloriediary.provider;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

import sk.upjs.caloriediary.DatabaseHelper;

import static android.content.ContentResolver.SCHEME_CONTENT;

public class DayContentProvider extends ContentProvider {
    private DatabaseHelper databaseHelper;
    public static final String AUTHORITY = "sk.upjs.caloriediary.provider.DayContentProvider";
    public static final Uri CONTENT_URI = new Uri.Builder().
            scheme(SCHEME_CONTENT).authority(AUTHORITY).appendPath(Provider.Day.TABLE_NAME).build();
    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    private static final int URI_MATCH_NOTES = 0;
    private static final int URI_MATCH_NOTE_BY_ID = 1;
    private static final String AUTOGENERATED_ID = null;
    public static final String NO_NULL_COLUMN_HACK = null;

    public DayContentProvider() {
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        // Implement this to handle requests to delete one or more rows.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public String getType(Uri uri) {
        // TODO: Implement this to handle requests for the MIME type of the data
        // at the given URI.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                return saveDay(values);
            default:
                return null;
        }
    }

    private Uri saveDay(ContentValues values) {
        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        ContentValues day = new ContentValues();
        day.put(Provider.Day._ID, AUTOGENERATED_ID);
        day.put(Provider.Day.DATE, values.getAsString(Provider.Day.DATE));
        day.put(Provider.Day.BREAKFAST, values.getAsString(Provider.Day.BREAKFAST));
        day.put(Provider.Day.LUNCH, values.getAsString(Provider.Day.LUNCH));
        day.put(Provider.Day.DINNER, values.getAsString(Provider.Day.DINNER));
        day.put(Provider.Day.SNACKS, values.getAsString(Provider.Day.SNACKS));
        day.put(Provider.Day.WATER, values.getAsString(Provider.Day.WATER));
        long newId = db.insert(Provider.Day.TABLE_NAME, NO_NULL_COLUMN_HACK, day);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public boolean onCreate() {
        this.databaseHelper = new DatabaseHelper(getContext());
        uriMatcher.addURI(AUTHORITY, Provider.Day.TABLE_NAME, URI_MATCH_NOTES);
        uriMatcher.addURI(AUTHORITY, Provider.Day.TABLE_NAME + "/#", URI_MATCH_NOTE_BY_ID);
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        Cursor cursor = db.query(Provider.Day.TABLE_NAME, null, null, null, null, null, null);
        return cursor;
    }



    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                long id = ContentUris.parseId(uri);
                SQLiteDatabase db = databaseHelper.getWritableDatabase();
                int affectedRows = db.update(Provider.Day.TABLE_NAME, values, Provider.Day._ID + " = ?", new String[] {String.valueOf(id)});
            default:
                return 0;
        }
    }


}
